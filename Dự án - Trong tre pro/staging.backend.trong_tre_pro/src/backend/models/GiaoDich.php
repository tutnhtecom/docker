<?php

namespace backend\models;

use common\models\User;
use Yii;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "trong_tre_giao_dich".
 *
 * @property int $id
 * @property int|null $active
 * @property string|null $created
 * @property string|null $updated
 * @property int|null $user_id
 * @property int|null $don_dich_vu_id
 * @property int|null $type_id
 * @property int|null $phu_phi_id
 * @property float|null $so_tien
 * @property float|null $vi_dien_tu
 * @property string|null $ghi_chu
 * @property string|null $type
 * @property string|null $tieu_de
 * @property string|null $no_deposit_withdrawal
 *
 * @property User $user
 * @property DanhMuc $type0
 * @property DonDichVu $donDichVu
 * @property PhuPhi $phuPhi
 */
class GiaoDich extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'trong_tre_giao_dich';
    }

    const NAP_TIEN = 'Nạp tiền';
    const RUT_TIEN = 'Rút tiền';

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['active', 'user_id'], 'integer'],
            [['created', 'updated'], 'safe'],
            [['so_tien'], 'number'],
            [['no_deposit_withdrawal'], 'string'],
            [['ghi_chu'], 'string'],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [['don_dich_vu_id'], 'exist', 'skipOnError' => true, 'targetClass' => DonDichVu::className(), 'targetAttribute' => ['don_dich_vu_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => DanhMuc::className(), 'targetAttribute' => ['type_id' => 'id']],
            [['phu_phi_id'], 'exist', 'skipOnError' => true, 'targetClass' => PhuPhi::className(), 'targetAttribute' => ['phu_phi_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'active' => 'Active',
            'created' => 'Created',
            'updated' => 'Updated',
            'user_id' => 'User ID',
            'so_tien' => 'So Tien',
            'ghi_chu' => 'Ghi Chu'
        ];
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function getType0()
    {
        return $this->hasOne(DanhMuc::className(), ['id' => 'type_id']);
    }

    public function getDonDichVu()
    {
        return DonDichVu::find()->where(['id' => $this->don_dich_vu_id])->one();
    }

    public function getPhuPhi()
    {
        return $this->hasOne(PhuPhi::className(), ['id' => 'phu_phi_id']);
    }
    public static function getGiaoDichTheoThang($id,$thang,$nam){
        $phuPhiKhac = GiaoDich::find()
            ->andFilterWhere([GiaoDich::tableName() . '.user_id' => $id, GiaoDich::tableName() . '.type' => GiaoDich::NAP_TIEN])
            ->andFilterWhere(['=', 'month(' . GiaoDich::tableName() . '.created)', $thang])
            ->andFilterWhere(['=', 'year(' . GiaoDich::tableName() . '.created)', $nam])
            ->andWhere('type_id is not null');
        $totalPhuPhiKhac = $phuPhiKhac->sum('so_tien');
        //Các loai khau tru
        $khauTru = GiaoDich::find()->andFilterWhere([GiaoDich::tableName() . '.user_id' => $id, GiaoDich::tableName() . '.type' => GiaoDich::RUT_TIEN])
            ->andFilterWhere(['=', 'month(' . GiaoDich::tableName() . '.created)', $thang])
            ->andFilterWhere(['=', 'year(' . GiaoDich::tableName() . '.created)', $nam])
            ->andWhere('type_id is not null');
        $totalKhauTru = $khauTru->sum('so_tien');
		return array(
            'nap_tien' => strval(floatval($totalPhuPhiKhac)),
            'rut_tien' => strval(floatval($totalKhauTru))
        );
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created = is_null($this->created)?date('Y-m-d H:i:s'):$this->created;
        }
        $this->updated = date('Y-m-d H:i:s');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if($this->no_deposit_withdrawal && ($this->no_deposit_withdrawal=="NO_DEPOSIT_WITHDRAWAL")){
            $this->updateAttributes(['vi_dien_tu' => $this->user->vi_dien_tu]);
        }else{
            if ($this->so_tien > 0 && !is_null($this->user)) {
                if ($this->type == self::NAP_TIEN) {
                    $this->user->updateAttributes(['vi_dien_tu' => $this->user->vi_dien_tu + $this->so_tien]);
                } else {
                    $this->user->updateAttributes(['vi_dien_tu' => $this->user->vi_dien_tu - $this->so_tien]);
                }
                $this->updateAttributes(['vi_dien_tu' => $this->user->vi_dien_tu]);
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
