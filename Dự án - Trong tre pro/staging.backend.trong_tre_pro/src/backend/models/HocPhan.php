<?php

namespace backend\models;

use common\models\User;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\VarDumper;
use yii\web\HttpException;

/**
 * This is the model class for table "trong_tre_hoc_phan".
 *
 * @property int $id
 * @property int|null $active
 * @property string|null $created
 * @property string|null $updated
 * @property int|null $user_id
 * @property int|null $khoa_hoc_id
 * @property int|null $bat_khoa_hoc
 * @property string|null $tieu_de
 * @property int|null $cap_do_id
 * @property int|null $type_id
 * @property string|null $image
 * @property string|null $ghi_chu
 *
 * @property BaiHoc[] $baiHocs
 * @property DanhMuc $capDo
 * @property KhoaHoc $khoaHoc
 * @property User $user
 * @property DanhMuc $type
 */
class HocPhan extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'trong_tre_hoc_phan';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['active', 'user_id', 'khoa_hoc_id', 'bat_khoa_hoc', 'cap_do_id', 'type_id'], 'integer'],
            [['created', 'updated'], 'safe'],
            [['image', 'ghi_chu'], 'string'],
            [['tieu_de'], 'string'],
            [['cap_do_id'], 'exist', 'skipOnError' => true, 'targetClass' => DanhMuc::className(), 'targetAttribute' => ['cap_do_id' => 'id']],
            [['khoa_hoc_id'], 'exist', 'skipOnError' => true, 'targetClass' => KhoaHoc::className(), 'targetAttribute' => ['khoa_hoc_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => DanhMuc::className(), 'targetAttribute' => ['type_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'active' => 'Active',
            'created' => 'Created',
            'updated' => 'Updated',
            'user_id' => 'User ID',
            'khoa_hoc_id' => 'Khoa Hoc ID',
            'bat_khoa_hoc' => 'Bat Khoa Hoc',
            'tieu_de' => 'Tieu De',
            'cap_do_id' => 'Cap Do ID',
            'type_id' => 'Type ID',
            'image' => 'Image',
            'ghi_chu' => 'Ghi Chu',
        ];
    }

    /**
     * Gets query for [[BaiHocs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBaiHocs()
    {
        return $this->hasMany(BaiHoc::className(), ['hoc_phan_id' => 'id']);
    }

    /**
     * Gets query for [[CapDo]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCapDo()
    {
        return $this->hasOne(DanhMuc::className(), ['id' => 'cap_do_id']);
    }

    /**
     * Gets query for [[KhoaHoc]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getKhoaHoc()
    {
        return $this->hasOne(KhoaHoc::className(), ['id' => 'khoa_hoc_id']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * Gets query for [[Type]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(DanhMuc::className(), ['id' => 'type_id']);
    }
    public function beforeSave($insert)
    {
        if ($insert){
            $this->created =date('Y-m-d H:i:s');
        }
        $this->updated =date('Y-m-d H:i:s');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function getListGiaoVienDaGan(){
        $giaoVien = GanGiaoVienDaoTao::findAll(['hoc_phan_id'=>$this->id]);
        return ArrayHelper::map($giaoVien,'giao_vien_id','giao_vien_id');
    }
    public function ganGiaoVien($id){
        $ganGiaoVien = new  GanGiaoVienDaoTao();
        $ganGiaoVien->giao_vien_id = $id;
        $ganGiaoVien->hoc_phan_id = $this->id;
        if (!$ganGiaoVien->save()){
            throw new HttpException(500,Html::errorSummary($ganGiaoVien));
        }
        return true;
    }
    public function boGanGiaoVien($id){
        GanGiaoVienDaoTao::deleteAll(['giao_vien_id'=>$id,'hoc_phan_id'=> $this->id]);
        return true;
    }
    public function getTongBaiHoc(){
        return BaiHoc::find()->andFilterWhere(['hoc_phan_id'=>$this->id,'active'=>1])->count();
    }
    public function getTongBaiHocDaHoanThanh($giaoVienID){
        $danhSachBaiHoc = ArrayHelper::map(BaiHoc::find()->andFilterWhere(['hoc_phan_id'=>$this->id,'active'=>1])->all(),'id','id');
        $daHoanThanh = 0;
        if (count($danhSachBaiHoc)>0){
            $daHoanThanh = KetQuaDaoTao::find()
                ->andFilterWhere(['in','bai_hoc_id',$danhSachBaiHoc])
                ->andFilterWhere(['trang_thai'=>KetQuaDaoTao::DAT])
                ->andFilterWhere(['giao_vien_id'=>$giaoVienID])
                ->andFilterWhere(['active'=>1])->groupBy('bai_hoc_id')->count();
        }
        return $daHoanThanh;
    }
}
