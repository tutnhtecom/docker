<?php


namespace backend\controllers;


use backend\models\CauHinh;
use backend\models\ChucNang;
use backend\models\DanhMuc;
use backend\models\PhanQuyen;
use backend\models\QuanLyUserVaiTro;
use backend\models\ThongBao;
use backend\models\ThongBaoUser;
use common\models\myAPI;
use common\models\User;
use kartik\mpdf\Pdf;
use Yii;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\ContentNegotiator;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\helpers\Html;
use yii\helpers\VarDumper;
use yii\rest\Controller;
use yii\web\HttpException;
use yii\web\Response;
use yii\web\UploadedFile;

class CoreApiController extends Controller
{
    public $dataPost;
    public $dataGet;
    public $uid;
    public $auth;
    public $tuKhoa;
    public $sort;
    public $page;
    public $limit;
    public $tuNgay;
    public $denNgay;
//    public function init() {
//
//        // $this->action not available in here
//
//    }
//    public function beforeAction($action)
//    {
//        $this->dataPost = $_POST;
//        $this->dataGet = $_GET;
//        $this->tuKhoa = isset($_GET['tuKhoa'])?$_GET['tuKhoa']:"";
//        $this->page = isset($_GET['page'])?(intval($_GET['page'])>0?intval($_GET['page']):1):1;
//        $this->limit =isset($_GET['limit'])?(intval($_GET['limit'])>0?intval($_GET['limit']):10):10;
//        $this->sort = isset($_GET['sort'])?($_GET['sort']!=""?intval($_GET['sort']):1):1;
//        $auth = explode(' ',Yii::$app->request->headers['authorization']);
//        $this->auth=isset($auth[1])?$auth[1]:null;
//        if(!in_array($action->actionMethod, [
//            'actionLogin',
//            'actionRegister',
//            'actionDieuKhoan',
//            'actionQuenMatKhau',
//            'actionLienHeVaTroGiup',
//            'actionGioiThieuApp',
//            'actionHeSinhThaiGiaoDuc',
//            'actionDichVu',
//            'actionNhom',
//            'actionGetDoTuoi',
//            'actionKiemTraMaXacThuc',
//            'actionGetTrinhDo',
//            'actionGetKhungThoiGian',
//            'actionGetLoaiTinTuc',
//        ])){
//            \Yii::$app->response->format = Response::FORMAT_JSON;
//
//            if(is_null($this->auth)) {
//
//                throw new HttpException(400, 'Tài khoản của bạn đang được đăng nhập trên thiết bị khác');
//            }
//
//            else{
//
//                if (empty($this->auth))
//                    $user = null;
//                else {
//                    $user = User::findOne([
//                        'auth_key' => $this->auth,
//                        'status' => 10,
//                    ]);
//                }
//            }
//            if(is_null($user)){
//                throw new HttpException(400, 'Tài khoản của bạn đang được đăng nhập trên thiết bị khác');
//            }else{
//                $this->uid= $user->id;
//            }
//        }
//        return parent::beforeAction($action); // TODO: Change the autogenerated stub
//    }

    public function behaviors()
    {
        $this->dataPost = $_POST;
        $this->dataGet = $_GET;
        $this->tuKhoa = isset($_GET['tuKhoa']) ? $_GET['tuKhoa'] : "";
        $this->tuNgay = isset($_GET['tuNgay']) ? ($_GET['tuNgay'] !== "" ? ($_GET['tuNgay']) : date("Y-n-j", strtotime("first day of this month"))) : date("Y-n-j", strtotime("first day of this month"));
        $this->denNgay = isset($_GET['denNgay']) ? ($_GET['denNgay'] !== "" ? ($_GET['denNgay']) : date("Y-n-j", strtotime("last day of this month"))) : date("Y-n-j", strtotime("last day of this month"));
        $this->page = isset($_GET['page']) ? (intval($_GET['page']) > 0 ? intval($_GET['page']) : 1) : 1;
        $this->limit = isset($_GET['limit']) ? (intval($_GET['limit']) > 0 ? intval($_GET['limit']) : 10) : 10;
        $this->sort = isset($_GET['sort']) ? ($_GET['sort'] != "" ? intval($_GET['sort']) : 1) : 1;
        $auth = explode(' ', Yii::$app->request->headers['authorization']);
        $this->auth = isset($auth[1]) ? $auth[1] : null;
        \Yii::$app->response->format = Response::FORMAT_JSON;
//        throw new HttpException(500,"Ứng dụng đang trong trời gian bảo trì, dự kiến hoạt động trở lại vào 08:00 25/09/2024");
        $user = User::findOne([
            'auth_key' => $this->auth,
            'status' => 10,
        ]);
        if (!is_null($user))
            $this->uid = $user->id;

        return [
            'corsFilter' => [
                'class' => \yii\filters\Cors::className(),
            ],
            'authenticator' => [
                'class' => HttpBearerAuth::className(),
                'except' => [
                    'login',
                    'register',
                    'dieu-khoan',
                    'quen-mat-khau',
                    'dich-vu',
                    'nhom',
                    'kiem-tra-ma-xac-thuc',
                    'get-trinh-do',
                    'home',
                    'tin-tuc',
                    'chi-tiet-dich-vu',
                    'danh-sach-khung-gio',
                    'get-ca',
                    'lien-he-va-tro-giup',
                    'gioi-thieu-app',
                    'he-sinh-thai-giao-duc',
                    'create-payment',
                    'vnpay-ipn',
                    'vnpay-return',
                    'trinh-do',
                    'xoa-user-facebook',
                    'get-trinh-do-bang-cap',
                    'login-google',
                    'xac-nhan-xoa-dich-vu',
                    'thanh-cong',
                    'that-bai',
                    'get-form',
                    'update'
                ]
            ],
            'contentNegotiator' => [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ],
            ],

        ];
    }

    public function facebookLogin($token)
    {

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://graph.facebook.com/v18.0/me?fields=id,name,email&access_token=' . $token,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        return json_decode($response);
    }

    public function googleLogin($token)
    {

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=' . $token,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        return json_decode($response);
    }

    //kiểm tra đầu vào khách hàng
    public function checkWeek($date)
    {
        return $this->weekOfMonth(myAPI::convertDMY2YMD($date));
    }

    public function checkField($fields)
    {
        foreach ($fields as $field) {
            if (!isset($this->dataPost[$field])) {
                throw new HttpException(400, "Vui lòng truyền tham số " . $field);
            }
        }
    }

    public function getArrayGhiChu($ghiChu)
    {
        $arr = explode('<br />', nl2br($ghiChu));
        $results = [];
        foreach ($arr as $index => $item) {
            $results[] = trim($item);
        }
        return ($results);
    }

    public function sendEMail($senderName, $senderEmail, $toEmail, $toName, $subject, $htmlContent)
    {
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://api.brevo.com/v3/smtp/email',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => json_encode([
                'sender' => ['name' => $senderName, 'email' => $senderEmail],
                'to' => [['name' => $toName, 'email' => $toEmail]],
                'subject' => $subject,
                'htmlContent' => $htmlContent
            ]),
            CURLOPT_HTTPHEADER => array(
                'accept: application/json',
                'api-key: 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',
                'content-type: application/json',
                'Cookie: __cf_bm=iCHRhCpfMzIRDiWe9qIM.g3ImIvd_9TFvJG.tZoua60-1701851974-0-AX3v+tstBgIej6WtAR4OVrkXpjff4Xsq6nejD2aaEBwCyTJ6PWGKmp7uYczSh5XL7HOapBnXiAiW7t55CGRa5LY='
            ),
        ));
        $response = curl_exec($curl);
        curl_close($curl);
        return $response;
    }

    public function validateEmail($email)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return false;
        }
        return true;
    }

    public function validatePhone($phone)
    {
        if (strlen($phone) != 10 && strlen($phone) != 11) {
            return false;
        }
        return true;
    }

    public function outputSuccess($data = "", $mes = ""): array
    {
        return [
            'status' => true,
            'code' => 200,
            'message' => $mes,
            'data' => $data
        ];
    }

    public function outputListUserSuccess($data = "", $mes = "")
    {
        if (!isset($this->dataGet['page'])) {
            throw new HttpException(400, "Vui lòng truyền tham số page");
        }
        if (intval($this->dataGet['page']) == 0) {
            throw new HttpException(500, "page tối thiểu bằng 1");
        }
        $total = count($data->all());

        $data = $data->limit($this->limit)->offset(($this->page - 1) * $this->limit)->orderBy(['created_at' => $this->sort == 1 ? SORT_DESC : SORT_ASC])->all();
        $lastPage = ceil($total / $this->limit);
        return [
            'status' => true,
            'code' => 200,
            'message' => $mes,
            'total' => $total,
            'per_page' => $this->limit,
            'current_page' => $this->page,
            'last_page' => $lastPage,
            'next_page_url' => $this->page < $lastPage ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page + 1), $_SERVER['QUERY_STRING']) : null,
            'prev_page_url' => $this->page > 1 ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page - 1), $_SERVER['QUERY_STRING']) : null,
            'form' => ($this->page - 1) * $this->limit + 1,
            'to' => $this->page * $this->limit,
            'data' => $data,
        ];
    }

    public function outputListSuccess($data = "", $mes = "")
    {
        if (!isset($this->dataGet['page'])) {
            throw new HttpException(400, "Vui lòng truyền tham số page");
        }
        if (intval($this->dataGet['page']) == 0) {
            throw new HttpException(500, "page tối thiểu bằng 1");
        }
        $total = count($data->all());
        $data = $data->limit($this->limit)->offset(($this->page - 1) * $this->limit)->orderBy(['created' => $this->sort == 1 ? SORT_DESC : SORT_ASC])->all();
        foreach ($data as $item) {
            if (isset($item->image)) {
                $item->image = CauHinh::getImage(($item->image));
            }
        }
        $lastPage = ceil($total / $this->limit);
        return [
            'status' => true,
            'code' => 200,
            'message' => $mes,
            'total' => $total,
            'per_page' => $this->limit,
            'current_page' => $this->page,
            'last_page' => $lastPage,
            'next_page_url' => $this->page < $lastPage ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page + 1), $_SERVER['QUERY_STRING']) : null,
            'prev_page_url' => $this->page > 1 ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page - 1), $_SERVER['QUERY_STRING']) : null,
            'form' => ($this->page - 1) * $this->limit + 1,
            'to' => $this->page * $this->limit,
            'data' => $data,
        ];
    }

    public function outputListSuccess2($data, $total, $mes = "")
    {
        if (!isset($this->dataGet['page'])) {
            throw new HttpException(400, "Vui lòng truyền tham số page");
        }
        if (intval($this->dataGet['page']) == 0) {
            throw new HttpException(500, "page tối thiểu bằng 1");
        }
        $lastPage = ceil($total / $this->limit);
        return [
            'status' => true,
            'code' => 200,
            'message' => $mes,
            'total' => $total,
            'per_page' => $this->limit,
            'current_page' => $this->page,
            'last_page' => $lastPage,
            'next_page_url' => $this->page < $lastPage ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page + 1), $_SERVER['QUERY_STRING']) : null,
            'prev_page_url' => $this->page > 1 ? CauHinh::getServer() . $_SERVER['REDIRECT_URL'] . "?" . str_replace('page=' . $this->page, 'page=' . ($this->page - 1), $_SERVER['QUERY_STRING']) : null,
            'form' => ($this->page - 1) * $this->limit + 1,
            'to' => $this->page * $this->limit,
            'data' => $data,
        ];
    }

    public function getDanhMuc($type, $select = ['id', 'name'])
    {
        $danhMuc = DanhMuc::find()->andFilterWhere(['type' => $type, 'active' => 1])->select($select)->all();
        return $danhMuc;
    }

    public function get_extension_image($imagetype)
    {
        if (empty($imagetype)) {
            return false;
        }

        switch ($imagetype) {
            case 'image/bmp':
                return '.bmp';
            case 'image/cis-cod':
                return '.cod';
            case 'image/gif':
                return '.gif';
            case 'image/ief':
                return '.ief';
            case 'image/jpeg':
                return '.jpg';
            case 'image/pipeg':
                return '.jfif';
            case 'image/tiff':
                return '.tif';
            case 'image/x-cmu-raster':
                return '.ras';
            case 'image/x-cmx':
                return '.cmx';
            case 'image/x-icon':
                return '.ico';
            case 'image/x-portable-anymap':
                return '.pnm';
            case 'image/x-portable-bitmap':
                return '.pbm';
            case 'image/x-portable-graymap':
                return '.pgm';
            case 'image/x-portable-pixmap':
                return '.ppm';
            case 'image/x-rgb':
                return '.rgb';
            case 'image/x-xbitmap':
                return '.xbm';
            case 'image/x-xpixmap':
                return '.xpm';
            case 'image/x-xwindowdump':
                return '.xwd';
            case 'image/png':
                return '.png';
            case 'image/x-jps':
                return '.jps';
            case 'image/x-freehand':
                return '.fh';
            default:
                return false;
        }
    }

    public function getPerPage()
    {
        return isset($this->dataPost['perPage']) ? $this->dataPost['perPage'] : 1;
    }

    public function getUser($user_id = 0)
    {
        $user = User::findOne($user_id == 0 ? $this->dataPost['uid'] : $user_id);
        if (is_null($user)) {
            throw new HttpException(403, "Không xác định dữ liệu");
        }
        return $user;
    }

    public function checkGetInput($fields)
    {
        foreach ($fields as $field) {
            if (!isset($this->dataGet[$field])) {
                throw new HttpException(400, "Vui lòng truyền tham số " . $field);
            }
        }
    }

    public function saveImage()
    {
        $link = "";
        $file = UploadedFile::getInstanceByName('image');
        if (!empty($file)) {
            $path = (dirname(dirname(__DIR__))) . '/upload-file';
            $link = date('Y/m/d') . '/' . '_' . \Yii::$app->security->generateRandomString() . $this->get_extension_image($file->type);
            if (FileHelper::createDirectory($path . '/' . date('Y/m/d') . '/', $mode = 0775, $recursive = true)) {
                $file->saveAs($path . '/' . $link);
            }
        }
        return $link;
    }

    public function saveVideo()
    {
        $link = "";
        $file = UploadedFile::getInstanceByName('video');

        if (!empty($file)) {
            if ($file->size > 20 * 1024 * 1024) {
                throw new HttpException(500, "Dung lượng video tối đa 20MB");
            }
            $path = (dirname(dirname(__DIR__))) . '/upload-file';
            $link = date('Y/m/d') . '/' . '_' . $file->name;
            if (FileHelper::createDirectory($path . '/' . date('Y/m/d') . '/', $mode = 0775, $recursive = true)) {
                $file->saveAs($path . '/' . $link);
            }
        }
        return $link;
    }

    public function saveThongBao(ThongBao $thongBao)
    {
        $thongBao->user_id = $this->uid;
        if (!$thongBao->save()) {
            throw new HttpException(500, Html::errorSummary($thongBao));
        } else {
            $users = QuanLyUserVaiTro::find();
            $thongBaoUser = ArrayHelper::map(ThongBaoUser::find()->andFilterWhere(['thong_bao_id' => $thongBao->id])->all(), 'user_id', 'user_id');
            if (count($thongBaoUser) > 0) {
                $users = $users->andFilterWhere(['or',
                    ['vai_tro' => User::ADMIN],
                    ['id' => $this->uid],
                    ['in', 'id', $thongBaoUser]
                ]);
            } else {
                $users = $users->andFilterWhere(['or', ['vai_tro' => User::ADMIN], ['id' => $this->uid]]);
            }
            $users = $users->andWhere('mobile_token is not null');
            $device = [];
            /** @var QuanLyUserVaiTro $user */
            foreach ($users->all() as $user) {
                $device[] = $user->mobile_token;
            }
            $this->thongBao($device, $thongBao->noi_dung, $thongBao->tieu_de);
        }
        return $this->outputSuccess("", "Thêm thông báo thành công");
    }

    public function thongBao($deviceTokens, $content, $title)
    {
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://fcm.googleapis.com/fcm/send',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => '{
              "registration_ids" : ' . json_encode($deviceTokens) . ' ,
              "notification" : {
                "body" : "' . $content . '",
                "title" : "' . $title . '"
              },
            }',
            CURLOPT_HTTPHEADER => array(
                'Authorization: key=AAAAsy0V5NU:APA91bFCVL_PTCy1gSkUxrGVKfAvNSW8WUmvLruohUN-2Bcpmd2yAwYzjxyEyrFqieHZkUXblSZtQIMF94ljvpZvcg0Vky3mjhuC_6n6y0yzZznj7-P8AvIjhqtDchhamaRAKF-wTtNp',
                'Content-Type: application/json'
            ),
        ));
        $response = curl_exec($curl);
        curl_close($curl);
        return $response;
    }

    public function exportPDF($content, $file_name, $title, $subject, $header, $footer, $margin, $temPath, $urlTaiFile = "")
    {
        $pdf = new \kartik\mpdf\Pdf([
            'mode' => \kartik\mpdf\Pdf::MODE_UTF8, // leaner size using standard fonts
            'content' => $content,
            'filename' => $file_name,
            'orientation' => Pdf::ORIENT_PORTRAIT,
            'cssFile' => 'https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css',
            'cssInline' => '.kv-heading-1{font-size:18px}
                        body{font-family: "Times"; font-size: 11pt} table td,table th{padding: 5px;}
                        table{width: 100%; border-collapse: collapse; text-wrap: none}
                        input{width: -webkit-fill-available;border: none;outline: none;max-width: 100%;}
            ',
            'options' => [
                'title' => $title,
                'subject' => $subject
            ],
            'methods' => [
                'SetHeader' => [$header],
                'SetFooter' => [$footer],
            ],
            'destination' => Pdf::DEST_FILE,
            'marginLeft' => $margin[1],
            'marginRight' => $margin[3],
            'marginTop' => $margin[0],
            'marginBottom' => $margin[2],
            'tempPath' => $temPath
        ]);
        $pdf->render();
        return true;
    }

    public function formPDF($fileName, $data)
    {
        $file_name = $fileName . "-" . time() . '.pdf';
        $this->exportPDF($data, dirname(dirname(__DIR__)) . '/files_pdf/' . $file_name,
            '', '', '',
            ' Page {PAGENO}',
            array(10, 10, 10, 10),
            dirname(dirname(__DIR__)) . '/files_pdf', '');
        return CauHinh::getServer() . '/files_pdf/' . $file_name;
    }

    public function sendSMS($phone, $content)
    {
//        VarDumper::dump('http://rest.esms.vn/MainService.svc/json/SendMultipleMessage_V4_get?Phone=' . $phone . '&Content=' . $content . '&ApiKey=41E4EA36160CD85E4F5F8A7A1C9B64&SecretKey=13AFA24E0C26C764B7593299FB3869&IsUnicode=1&Brandname=TrongtrePro&SmsType=2&CallbackUrl=&RequestId=');exit();
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'http://rest.esms.vn/MainService.svc/json/SendMultipleMessage_V4_get?Phone=' . urlencode($phone) . '&Content=' . urlencode($content) . '&ApiKey=41E4EA36160CD85E4F5F8A7A1C9B64&SecretKey=13AFA24E0C26C764B7593299FB3869&IsUnicode=1&Brandname=TrongtrePro&SmsType=2&CallbackUrl=&RequestId=',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Cookie: ASP.NET_SessionId=h5dpwfgsn5nb1ammp1zbinez'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        return $response;
    }


}
